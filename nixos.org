:DOC-CONFIG:
#+PROPERTY: header-args:nix :comments noweb
#+STARTUP: fold
#+AUTO_TANGLE: t
#+HUGO_BUNDLE: nixos-configuration
#+EXPORT_FILE_NAME: index.en
#+HUGO_PUBLISHDATE: 2023-10-26
#+HUGO_FRONT_MATTER_KEY_REPLACE: author>authors
#+FILETAGS: :NixOS:Org-mode:
:END:

#+TITLE: Nixos Configuration
#+AUTHOR: A7R7

* Intro
Welcome to my nixos configuration blog.
* Flake

So I use flake to manage my configs.
#+begin_src nix :tangle flake.nix :noweb yes
  {
    description = "A7R7's NixOS Flake";
    nixConfig = {
      <<nixConfig>>
    };
    inputs = {
      <<inputs>>
    };
    outputs =
      <<outputs>>
  }
#+end_src
** nixConfig
#+begin_src nix :noweb-ref nixConfig
    experimental-features = [ "nix-command" "flakes" ];
    # nix community's cache server
    extra-substituters = [
      "https://nix-community.cachix.org"
      "https://nixpkgs-wayland.cachix.org"
    ];
    extra-trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
      "nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA="
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
    ];

#+end_src
** Inputs
#+begin_src nix :noweb-ref inputs
    ## nixpkgs
    nixpkgs-stable.url = "github:nixos/nixpkgs/nixos-23.05";
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-wayland.url = "github:nix-community/nixpkgs-wayland";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    utils.url = "github:gytis-ivaskevicius/flake-utils-plus";
    nur.url = "github:nix-community/NUR";
    mynur.url = "github:A7R7/nur-packages";
    # hyprland wm
    hyprland.url = "github:hyprwm/Hyprland";
    pyprland.url = "github:hyprland-community/pyprland";
    # ags.url = "github:Aylur/ags";
    # ags.url = "github:Aylur/ags/feat/widgets-subclass-rewrite";
    musnix.url = "github:musnix/musnix";
#+end_src
** Outputs
#+begin_src nix :noweb-ref outputs
  inputs@{
    self,
    nixpkgs,
    nixpkgs-stable,
    nur, mynur,
    home-manager,
    hyprland,
    ... }:
  let
    username = "aaron-nix";
    system = "x86_64-linux";
    pkgs = import nixpkgs {
      inherit system;
      config.allowUnfree = true;
      overlays = [
        nur.overlay
        mynur.overlay
      ];
    };
    pkgs-stable = import nixpkgs-stable {
      inherit system;
      config.allowUnfree = true;
    };
  in
    {
    nixosConfigurations = {
      Nixtop = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs username system pkgs pkgs-stable; };
        modules = [ ./host/configuration.nix ];
      };
    };
  	homeConfigurations = {
      aaron-nix = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;
        extraSpecialArgs = { inherit inputs username pkgs pkgs-stable; };
        modules = [ ./home/home.nix ];
      };
    };
  };

#+end_src
* Host
:PROPERTIES:
:header-args:nix: :noweb-ref host-config
:END:
#+begin_src nix :tangle host/configuration.nix :comments noweb :noweb yes :noweb-ref no
  { config, pkgs, lib, inputs, username, ... }:
  {
    imports =
      [
        /etc/nixos/hardware-configuration.nix
        inputs.musnix.nixosModules.musnix
        # ./hyprland.nix
      ];
    <<host-config>>
  }
#+end_src
** Nix
#+begin_src nix
    system.stateVersion = "23.05";
    nixpkgs.config.allowUnfree = true;
    nix = {
      # This will add each flake input as a registry
      # To make nix3 commands consistent with your flake
      registry = lib.mapAttrs (_: value: { flake = value; }) inputs;

      # This will additionally add your inputs to the system's legacy channels
      # Making legacy nix commands consistent as well, awesome!
      nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;

      settings = {
        experimental-features = "nix-command flakes";
        auto-optimise-store = true;
        trusted-users = [ "${username}" ];
      };
    };
#+end_src

** Bootloader
[[file:/etc/nixos/hardware-configuration.nix][/etc/nixos/hardware-configuration.nix]]
#+begin_src nix
  boot = {
    # kernelPackages = pkgs.linuxPackages_latest;
    loader = {
      # systemd-boot.enable = true;
      grub = {
        enable = true;
        theme = inputs.mynur.packages.${pkgs.system}.xenlism-grub-4k-nixos;
        splashMode = "normal";
        # efiSupport = true;
      };
      efi.canTouchEfiVariables = true;
      efi.efiSysMountPoint = "/boot";
      timeout = 10;
    };
  };
#+end_src
** Network
#+begin_src nix
    networking = {
      hostName = "Nixtop"; # Define your hostname.
      networkmanager.enable = true;
    };
#+end_src
** Locale
#+begin_src nix
    time.timeZone = "Asia/Shanghai";
    i18n = {
      defaultLocale = "en_US.UTF-8";
      supportedLocales = [
        "en_US.UTF-8/UTF-8"
        "zh_CN.UTF-8/UTF-8"
      ];
    };
    console = {
      font = "Lat2-Terminus16";
      useXkbConfig = true; # use xkbOptions in tty.
    };


#+end_src
** Sound
#+begin_src nix
    # musnix.enable = true;
    sound.enable = false; # sound.enable is only meant for ALSA-based configurations
    hardware.pulseaudio.enable = false;
    hardware.bluetooth.enable = true;
    security.rtkit.enable = true;
    services. pipewire = {
      enable = true;
      alsa.enable = true;
      alsa.support32Bit = true;
      pulse.enable = true;
      jack.enable = true;
    };
#+end_src
** User

#+begin_src nix
    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.users.${username} = {
      isNormalUser = true;
      extraGroups = [ "wheel" "networkmanager" "libvirtd" "adbusers" "audio"];
      shell = pkgs.elvish;
    };
#+end_src
** Pkgs

#+begin_src nix
    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = with pkgs; [
      vim neovim
      wget
      curl
      git
      stow
      man
      dash zsh fish elvish nushell
      efibootmgr
      gnumake
      killall
      home-manager
    ];

    # hint electron apps to use wayland
    environment.sessionVariables.NIXOS_OZONE_WL = "1";

    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # programs.gnupg.agent = {
    #   enable = true;
    #   enableSSHSupport = true;
    # };
    i18n.inputMethod = {
      enabled = "fcitx5";
      fcitx5 = {
        addons = with pkgs; [
          fcitx5-gtk
          fcitx5-rime
          fcitx5-chinese-addons
          librime
        ];
      };
    };

    virtualisation = {
      podman.enable = true;
      libvirtd.enable = true;
      waydroid.enable = true;
    };

    programs = {
      # regreet.enable = true;
      # This line installs ReGreet,
      # sets up systemd tmpfiles for it,
      # enables services.greetd and also configures its default session to start ReGreet using cage.
      hyprland = {
        enable = true;
        xwayland.enable = true;
        enableNvidiaPatches = false;
      #  package = (inputs.hyprland.packages.${pkgs.system}.hyprland.override {
      #    enableXWayland = true;
      #    enableNvidiaPatches = false;
      #  })
      };
      adb.enable = true;
      steam = {
        enable = true;
        remotePlay.openFirewall = true; # Open ports in the firewall for Steam Remote Play
        dedicatedServer.openFirewall = true; # Open ports in the firewall for Source Dedicated Server
      };
      dconf.enable = true;
    };

    xdg.portal = {
     enable = true;
     wlr.enable = true;
     # extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
    };
#+end_src
** Fonts
#+begin_src nix
    fonts.packages = with pkgs; [
      noto-fonts
      noto-fonts-cjk
      noto-fonts-emoji
      noto-fonts-extra
      liberation_ttf
      roboto
      ibm-plex
      nerdfonts
      sarasa-gothic
    ];
  # services
#+end_src
** Services
#+begin_src nix
    services = {
      printing.enable = true;
      flatpak.enable = true;
      openssh.enable = true;
      # asusd.enable = true; # for ASUS ROG laptops
      xserver = {
        enable = true;
        excludePackages = [ pkgs.xterm ];
        layout = "us";
        xkbOptions = "caps:escape";
        displayManager.gdm.enable = true;
        # desktopManager.gnome.enable = true;
      };

      gvfs.enable = true;
      devmon.enable = true;
      udisks2.enable = true;
      upower.enable = true;
      accounts-daemon.enable = true;
      gnome = {
        evolution-data-server.enable = true;
        glib-networking.enable = true;
        gnome-keyring.enable = true;
        gnome-online-accounts.enable = true;
      };
    };
#+end_src
*** Syncthing
[[https://github.com/syncthing/syncthing][Syncthing]] is a continuouts file synchronization program using UPnP, which synchronize files *WITHOUT* centralized services.
#+begin_src nix
  services.syncthing = {
    enable = true;
    openDefaultPorts = true; # 22000/TCP and 22000/UDP
    dataDir = "/home/${username}";
    configDir = "/home/${username}/.config/syncthing";
    user = "${username}";
    group = "users";
    # guiAdd.0:8384"; # To be able to access the web GUI
  };
#+end_src
*** Emacs
#+begin_src nix
  services.emacs = {
    enable = true;
    package = pkgs.emacs29-pgtk;
  };
#+end_src
* Home
** Config
#+begin_src nix :tangle home/home.nix :comments noweb
  { config, pkgs, pkgs-stable, inputs, ... }:

  {
    imports = [
      ./packages.nix
    ];

    home = {
      username = "aaron-nix";
      homeDirectory = "/home/aaron-nix";
      stateVersion = "23.05";
    };

    programs.home-manager.enable = true;

    nixpkgs = {
      config = {
        allowUnfree = true;
        # Workaround for https://github.com/nix-community/home-manager/issues/2942
        allowUnfreePredicate = (_: true);
      };
    };

    xresources.properties = {
      "Xcursor.size" = 16;
      "Xft.dpi" = 172;
    };

    programs.git = {
      enable = true;
      userName = "a7r7";
      userEmail = "Aaron__Lee_@outlook.com";
    };
    programs.vscode = {
      enable = true;
      package = pkgs.vscode.fhs;
    };
    programs.eww = {
      enable = true;
    };
    services.syncthing = {
      enable = true;
      tray = {enable = true;};
    };
    services.emacs = {
      enable = true;
      package = pkgs.emacs29-pgtk;
      socketActivation.enable = true;
      client = {
        enable = true;
      };
    };
  }
#+end_src
** Packages
:PROPERTIES:
:header-args:nix: :tangle home/packages.nix
:END:
#+begin_src nix :noweb yes
  { inputs, pkgs, pkgs-stable, nur, ... }:
  {
    home.packages = (with pkgs; [
      <<development>>
      <<runtime>>
      <<cmdline>>
      <<multimedia>>
      <<network>>
      <<gaming>>
      <<desktop>>
      <<system-tools>>
    ]);
  }

#+end_src
*** Development
:PROPERTIES:
:header-args:nix: :noweb-ref development
:END:
**** Text-editor
#+begin_src nix
  neovide
  emacs29-pgtk
  marktext
  libreoffice
#+end_src

**** Languages

#+begin_src nix
  gcc ccache cmake clang-tools
  (python311.withPackages(ps: with ps; [
    # required by lsp-bridge, holo-layer, and blink search
    epc orjson sexpdata six paramiko rapidfuzz
    pynput inflect pyqt6 pyqt6-sip
    python-pam requests
    numpy toolz
  ]))
  octave
  nodejs
  go
  bun
  sassc
  typescript
  meson
  ninja
  # eslint
  maven
  pkg-config
  rnix-lsp # WIP Language Server for Nix
  texlive.combined.scheme-full

#+end_src
**** Database
#+begin_src nix
  sqlite
  dbeaver
#+end_src
**** Others
#+begin_src nix
  doxygen
  doxygen_gui
  gtk-engine-murrine
  gnome-themes-extra
#+end_src
*** Runtime
:PROPERTIES:
:header-args:nix: :noweb-ref runtime
:END:
#+begin_src elisp
  gtk-engine-murrine
  gnome-themes-extra
#+end_src
*** Cmdline
:PROPERTIES:
:header-args:nix: :noweb-ref cmdline
:END:

**** Emulator
#+begin_src nix
  kitty
  alacritty
  wezterm
#+end_src
**** Tools
#+begin_src nix
      carapace
      starship
      lf
      thefuck
      bat
      eza
      ranger nnn
      fd
      ripgrep
      fzf
      socat
      jq
      yq-go
      acpi
      inotify-tools
      ffmpeg
      libnotify
      zoxide
      autoconf
      tree
      ghostscript
      _7zz
      lazygit
      hugo
#+end_src
**** Toys
#+begin_src nix
      pipes-rs
      tty-clock
      cava
      cmatrix
      fastfetch
      uniscribe # describe unicodes
      unipicker # pick unicodes
      nerdfix # find nerd font icons
#+end_src

*** Multimedia
:PROPERTIES:
:header-args:nix: :noweb-ref multimedia
:END:
**** Audio-production
#+begin_src nix
  # daw
  ardour
  # synthesizer-plugin
  zyn-fusion
  surge
  geonkick
  distrho
  # sampler
  avldrums-lv2
  drumkv1
  drumgizmo
  # effect processor
  calf
  lsp-plugins
#+end_src
**** Music Player
#+begin_src nix
  tauon
  tidal-dl
#+end_src
**** Image Editors
#+begin_src nix
  gimp-with-plugins
  inkscape
  imagemagick    # editing and manipulating digital images
#+end_src

**** Videos
#+begin_src nix
  (wrapOBS {
    plugins = with pkgs.obs-studio-plugins; [
      wlrobs
      obs-backgroundremoval
      obs-pipewire-audio-capture
    ];
  })
#+end_src
**** PDF
#+begin_src nix
  zathura
#+end_src
*** Network
:PROPERTIES:
:header-args:nix: :noweb-ref network
:END:

**** Browser
#+begin_src nix
  firefox
  chromium
  (vivaldi.override {
    proprietaryCodecs = true;
    enableWidevine = true;
    commandLineArgs = "--enable-wayland-ime";
  })
#+end_src
**** Message
#+begin_src nix
  qq
  discord
  telegram-desktop
#+end_src
**** VPN
#+begin_src nix
  clash-verge
#+end_src
*** Gaming
:PROPERTIES:
:header-args:nix: :noweb-ref gaming
:END:
#+begin_src nix
  prismlauncher
  glfw-wayland-minecraft
  zulu21
  steam-tui
  steamcmd
  steam
  gamescope
#+end_src
*** Desktop
:PROPERTIES:
:header-args:nix: :noweb-ref desktop
:END:
#+begin_src nix
  nsxiv          # the best image viewer
  gnome.nautilus # gnome's file manager
  gnome.gnome-tweaks # gnome's file manager
  gnome.gnome-characters
  cinnamon.nemo  # cinnamon's file manager
  doublecmd

  hyprpaper      # wallpaper utility
  swww           # dynamic wallpaper
  gnome.adwaita-icon-theme

  hyprkeys       # keybind retrieval utility
  hyprnome       # gnome like workspace switch

  hyprshade      # screen color filters
  wl-gammactl    # set contrast, brightness and gamma on wl

  hyprpicker     # wlroots color picker
  wayshot        # screenshots tool
  grimblast      # screenshots tool
  wf-recorder    # screen recording tool
  swappy         # Wayland native snapshot editing tool

  wl-clipboard   # wayland clipboard

  wlogout        # logout gui
  rofi-wayland-unwrapped # app launcher
  pavucontrol    # sound control
  brightnessctl  # brightness control

  # eww-wayland    # bar

  # bar and shell in gjs
  # inputs.ags.packages.${system}.default

  # hyprland plugin set in python
  inputs.pyprland.packages.${system}.default
#+end_src
*** System-tools
:PROPERTIES:
:header-args:nix: :noweb-ref system-tools
:END:

#+begin_src nix
  gparted        # disk partition manager
  fsearch        # search files in disk
  lshw
#+end_src
