:DOC-CONFIG:
#+PROPERTY: header-args:nix :comments noweb
#+AUTO_TANGLE: nil
#+STARTUP: fold
#+HUGO_BUNDLE: nixos-configuration
#+EXPORT_FILE_NAME: index.en
#+HUGO_PUBLISHDATE: 2023-10-26
#+HUGO_FRONT_MATTER_KEY_REPLACE: author>authors
#+FILETAGS: :NixOS:Org-mode:
:END:

#+TITLE: Nixos Configuration
#+AUTHOR: A7R7

Welcome to my nixos configuration blog. This is a configuration for a single laptop setup.
* Flake

So I use flake to manage my configs.
#+begin_src nix :tangle flake.nix :noweb no-export
  {
    description = "A7R7's NixOS Flake";
    nixConfig = {
      <<nixConfig>>
    };
    inputs = {
      <<inputs>>
    };
    outputs =
      <<outputs>>
  }
#+end_src
** nixConfig
#+begin_src nix :noweb-ref nixConfig
    experimental-features = [ "nix-command" "flakes" ];
    # nix community's cache server
    extra-substituters = [
      "https://nix-community.cachix.org"
      "https://nixpkgs-wayland.cachix.org"
    ];
    extra-trusted-public-keys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
      "nixpkgs-wayland.cachix.org-1:3lwxaILxMRkVhehr5StQprHdEo4IrE8sRho9R9HOLYA="
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
    ];

#+end_src
** Inputs
#+begin_src nix :noweb-ref inputs
  ## nixpkgs
  nixpkgs-2305.url = "github:nixos/nixpkgs/nixos-23.05";
  nixpkgs-2311.url = "github:nixos/nixpkgs/nixos-23.11";
  nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
  nixpkgs-wayland.url = "github:nix-community/nixpkgs-wayland";
  home-manager = {
    url = "github:nix-community/home-manager";
    inputs.nixpkgs.follows = "nixpkgs";
  };

  utils.url = "github:gytis-ivaskevicius/flake-utils-plus";
  nur.url = "github:nix-community/NUR";
  mynur.url = "github:A7R7/nur-packages";
  # mynur.url = "git+file:./?dir=./nurpkgs";
  # mynur.url = "./nurpkgs";
  # hyprland wm
  hyprland.url = "github:hyprwm/Hyprland";
  pyprland.url = "github:A7R7/pyprland";
  ags.url = "github:Aylur/ags";
  # ags.url = "github:Aylur/ags/feat/widgets-subclass-rewrite";
  musnix.url = "github:musnix/musnix";
  pip2nix.url = "github:nix-community/pip2nix";
  emacs.url = "github:nix-community/emacs-overlay";
#+end_src
** Outputs
#+begin_src nix :noweb-ref outputs
  inputs@{
    self,
    nixpkgs,
    home-manager,
    ... }:
  let
    username = "aaron-nix";
    system = "x86_64-linux";
    pkgs = import nixpkgs {
      inherit system;
      config.allowUnfree = true;
      overlays = with inputs; [
        nur.overlay
        mynur.overlay
        emacs.overlay
        (final: prev: { v2305 = import inputs.nixpkgs-2305 {
            inherit system;
            config.allowUnfree = true;
        };})
        (final: prev: { v2311 = import inputs.nixpkgs-2311 {
            inherit system;
            config.allowUnfree = true;
        };})
      ];
    };
  in
    {
    nixosConfigurations = {
      Nixtop = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs username system pkgs; };
        modules = [ ./host/configuration.nix ];
      };
    };
  	homeConfigurations = {
      aaron-nix = home-manager.lib.homeManagerConfiguration {
        inherit pkgs;
        extraSpecialArgs = { inherit inputs username pkgs; };
        modules = [ ./home/home.nix ];
      };
    };
  };

#+end_src

#+RESULTS:

* Host
:PROPERTIES:
:header-args:nix: :noweb-ref host-config
:END:
#+begin_src nix :tangle host/configuration.nix :comments noweb :noweb no-export :noweb-ref no
  { config, pkgs, lib, inputs, username, ... }:
  {
    imports =
      [
        /etc/nixos/hardware-configuration.nix
        inputs.musnix.nixosModules.musnix
      ];
    <<host-config>>
  }
#+end_src
** Nix
#+begin_src nix
  system.stateVersion = "23.11";
  nixpkgs.config.allowUnfree = true;
  nix = {
    # This will add each flake input as a registry
    # To make nix3 commands consistent with your flake
    registry = lib.mapAttrs (_: value: { flake = value; }) inputs;

    # This will additionally add your inputs to the system's legacy channels
    # Making legacy nix commands consistent as well, awesome!
    nixPath = lib.mapAttrsToList (key: value: "${key}=${value.to.path}") config.nix.registry;

    settings = {
      experimental-features = "nix-command flakes";
      auto-optimise-store = true;
      trusted-users = [ "${username}" ];
    };
  };
#+end_src

** Boot
[[file:/etc/nixos/hardware-configuration.nix][/etc/nixos/hardware-configuration.nix]]
#+begin_src nix
  boot = {
    # kernelPackages = pkgs.linuxPackages_latest;
    kernelPackages = pkgs.linuxPackages_zen;
    loader = {
      # systemd-boot.enable = true;
      grub = {
        enable = true;
        theme = pkgs.mynur.xenlism-grub-4k-nixos;
        splashMode = "normal";
        # efiSupport = true;
      };
      efi.canTouchEfiVariables = true;
      efi.efiSysMountPoint = "/boot";
      timeout = 10;
    };
  };
#+end_src
** Network
#+begin_src nix
  networking = {
    hostName = "Nixtop"; # Define your hostname.
    networkmanager.enable = true;
  };
#+end_src
** Sound
#+begin_src nix
  # musnix.enable = true;
  sound.enable = false; # sound.enable is only meant for ALSA-based configurations
  hardware.pulseaudio.enable = false;
  hardware.bluetooth.enable = true;
  security.rtkit.enable = true;
  services. pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    jack.enable = true;
  };
#+end_src
** Locale
#+begin_src nix
  time.timeZone = "Asia/Shanghai";
  i18n = {
    defaultLocale = "en_US.UTF-8";
    supportedLocales = [
      "en_US.UTF-8/UTF-8"
      "zh_CN.UTF-8/UTF-8"
    ];
  };
  console = {
    font = "Lat2-Terminus16";
    useXkbConfig = true; # use xkbOptions in tty.
  };


#+end_src
** Input method
  #+begin_src nix
  i18n.inputMethod = {
    enabled = "fcitx5";
    fcitx5 = {
      addons = with pkgs; [
        fcitx5-gtk
        fcitx5-rime
        fcitx5-chinese-addons
        librime
      ];
    };
  };
  # environment.sessionVariables.GTK_IM_MODULE = "fcitx";
  # environment.sessionVariables.QT_IM_MODULE = "fcitx";
  # environment.sessionVariables.XMODIFIERS = "@im=fcitx";
#+end_src
** User

#+begin_src nix
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.${username} = {
    isNormalUser = true;
    extraGroups = [ "wheel" "networkmanager" "libvirtd" "adbusers" "audio"];
    # shell = pkgs.elvish;
  };
#+end_src

** Pkgs
#+begin_src nix
environment.systemPackages = with pkgs; [
  vim neovim
  wget
  curl
  git
  stow
  man
  efibootmgr
  gnumake
  killall
  home-manager
  dash elvish fish nushell tcsh xonsh zsh
];
  #+end_src
*** Shells
Shells. Yeah I'd like to try different shells.
#+begin_src nix
environment.shells = with pkgs; [
  dash elvish fish nushell tcsh xonsh zsh
];
#+end_src
This adds ~~/.local/bin~ to PATH.
#+begin_src nix
environment.localBinInPath = true;
#+end_src

** Virtualisation
#+begin_src nix
  virtualisation = {
    podman.enable = true;
    libvirtd.enable = true;
    waydroid.enable = true;
  };
#+end_src
** Programs
#+begin_src nix
# programs.regreet = {
# This line installs ReGreet,
# sets up systemd tmpfiles for it,
# enables services.greetd and also configures its default session to start ReGreet using cage.
# enable = true;
# };

programs.adb.enable = true;
programs.dconf.enable = true;

programs.hyprland = {
  enable = true;
  xwayland.enable = true;
  enableNvidiaPatches = false;
};

programs.wayfire = {
  enable = true;
  plugins = (with pkgs.wayfirePlugins; [
    wcm
    wf-shell
    wayfire-plugins-extra
  ]) ++  [
    pkgs.mynur.swayfire
  ];
};

programs.steam = {
  enable = true;
  remotePlay.openFirewall = true; # Open ports in the firewall for Steam Remote Play
  dedicatedServer.openFirewall = true; # Open ports in the firewall for Source Dedicated Server
};

xdg.portal = {
  enable = true;
  wlr.enable = true;
  # extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
};
#+end_src
** Fonts
#+begin_src nix
  fonts.fonts = with pkgs; [
    noto-fonts
    noto-fonts-cjk
    roboto roboto-serif
    sarasa-gothic
  ];
  fonts.fontconfig = {
    enable = true;
    includeUserConf = true;
    allowBitmaps = false;
  };
#+end_src
** Services
*** COMMENT Greetd
#+begin_src nix
  services.greetd = {
    enable = true;
    settings = rec {
      initial_session = {
        command = "${pkgs.hyprland}/bin/Hyprland";
        user = "${username}";
      };
      default_session = initial_session;
    };
  };
#+end_src
*** Misc
#+begin_src nix
  services.tlp.enable = true;
  services.printing.enable = true;
  services.flatpak.enable = true;
  services.openssh.enable = true;
  # userspace virtual filesystem
  services.gvfs.enable = true;
  # an automatic device mounting daemon
  services.devmon.enable = true;
  # a DBus service that allows applications to query and manipulate storage devices.
  services.udisks2.enable = true;
  # a DBus service that provides power management support to applications.
  services.upower.enable = true;
  # a DBus service for accessing the list of user accounts and information attached to those accounts.
  services.accounts-daemon.enable = true;
  services.xserver = {
    enable = true;
    excludePackages = [ pkgs.xterm ];
    layout = "us";
    xkbOptions = "caps:escape";
    displayManager.gdm.enable = true;
    # desktopManager.gnome.enable = true;
  };
#+end_src
*** GNOME
#+begin_src nix
  services.gnome = {
    evolution-data-server.enable = true;
    glib-networking.enable = true;
    gnome-keyring.enable = true;
    gnome-online-accounts.enable = true;
    at-spi2-core.enable = true; # avoid the warning "The name org.a11y.Bus was not provided by any .service files"
  };
#+end_src

*** DAE
#+begin_src nix
  services.dae = {
    enable = true;
    configFile = "/home/${username}/.config/dae/config.dae";
  };
#+end_src
*** Syncthing
[[https://github.com/syncthing/syncthing][Syncthing]] is a continuouts file synchronization program using UPnP, which synchronize files *WITHOUT* centralized services.
#+begin_src nix
  services.syncthing = {
    enable = true;
    openDefaultPorts = true; # 22000/TCP and 22000/UDP
    dataDir = "/home/${username}";
    configDir = "/home/${username}/.config/syncthing";
    user = "${username}";
    group = "users";
    # guiAdd.0:8384"; # To be able to access the web GUI
  };
#+end_src
** Security
Polkit is used for controlling system-wide privileges. It provides an organized way for non-privileged processes to communicate with privileged ones, especially for those GUI applications.
#+begin_src nix
  security.polkit.enable = true;
  # start polkit on login by creating a systemd user service
  #+end_src
* Home
Becareful that packages installed by ~nix profile install~ can conflict with packages defined here! Therefore, it is recommended to clear nix profile list before home-manager switch.
** Config
:PROPERTIES:
:header-args:nix: :noweb-ref hm-config
:END:
#+begin_src nix :tangle home/home.nix :comments noweb :noweb no-export :noweb-ref no
{ config, pkgs, inputs, ... }:
let
  username = "aaron-nix";
  homeDirectory = "/home/aaron-nix";
in
{
  imports = [
    ./packages.nix
  ];
  <<hm-config>>
}
#+end_src
*** Home
#+begin_src nix
  home = {
    username = username;
    homeDirectory = homeDirectory;
    stateVersion = "23.11";
    sessionVariables = {
      QT_XCB_GL_INTEGRATION = "none"; # kde-connect
      NIXPKGS_ALLOW_UNFREE = "1";
      SHELL = "${pkgs.zsh}/bin/elvish";
    };
    sessionPath = [
      "$HOME/.local/bin"
    ];
  };
  programs.home-manager.enable = true;

  nixpkgs = {
    config = {
      allowUnfree = true;
      # Workaround for https://github.com/nix-community/home-manager/issues/2942
      allowUnfreePredicate = (_: true);
    };
  };

#+end_src

*** Font
#+begin_src nix
fonts.fontconfig.enable = true;
home.packages = with pkgs; [
   nerdfonts
   noto-fonts-monochrome-emoji
   noto-fonts-emoji
   noto-fonts-extra
   source-han-mono
   source-han-sans
   source-han-serif
   source-han-serif-vf-ttf

   commit-mono
   monaspace
   mynur.symbols-nerd-font
   # mynur.ibm-plex-nerd-font
   ibm-plex
   mynur.sarasa-gothic-nerd-font
   fontforge-gtk
];
#+end_src

#+RESULTS:

*** GTK
#+begin_src nix
  gtk.enable = true;
  gtk.theme = {
    name = "fluent-gtk-theme";
    package = pkgs.fluent-gtk-theme.override {
      tweaks = [ "blur" ];
    };
  };
  gtk.cursorTheme = {
    name = "whitesur-cursors";
    package = pkgs.whitesur-cursors;
  };
  gtk.iconTheme = {
    name = "kora";
    package = pkgs.kora-icon-theme;
  };
  gtk.gtk3.bookmarks = [
    "file://${homeDirectory}/Documents"
    "file://${homeDirectory}/Music"
    "file://${homeDirectory}/Pictures"
    "file://${homeDirectory}/Videos"
    "file://${homeDirectory}/Downloads"
    "file://${homeDirectory}/Desktop"
    "file://${homeDirectory}/Projects"
    "file://${homeDirectory}/.config Config"
    "file://${homeDirectory}/.local/share Local"
  ];

  xresources.properties = {
    "Xcursor.size" = 16;
    "Xft.dpi" = 172;
  };
#+end_src

*** Programs
#+begin_src nix
programs.vscode = {
  enable = true;
  package = pkgs.vscode.fhs;
};
programs.emacs = {
  enable = true;
  package = pkgs.emacs-unstable-pgtk;
};
#+end_src
*** Services
#+begin_src nix
  services.syncthing = {
    enable = true;
    tray = {enable = true;};
  };
  services.emacs.enable = true;
#+end_src
** Packages
:PROPERTIES:
:header-args:nix: :noweb-ref hm-packages
:END:
#+begin_src nix :tangle home/packages.nix :noweb no-export :noweb-ref no
  { inputs, pkgs, ... }:
  {
    home.packages = (with pkgs; [
      <<hm-packages>>
    ]);
  }
#+end_src

*** Development
**** Text-editor
#+begin_src nix
helix
lapce  # a rust powered editor
libreoffice
neovide
marktext
#+end_src

**** Languages
These tools can be seen as runtimes, for non serious usage and quick testing.
To seriously do development on nixos I have to write derivations.
#+begin_src nix
  gcc ccache cmake clang-tools
  (python311.withPackages(ps: with ps; [
    # required by lsp-bridge, holo-layer, and blink search
    epc orjson sexpdata six paramiko rapidfuzz
    pynput inflect pyqt6 pyqt6-sip
    python-pam requests
    numpy pandas toolz
    pyperclip
    pillow grad-cam
    torch torchvision opencv
    jupyter ipython
    # the unusable package manager
    pip pipdeptree
    # mynur.pix2tex
    # mynur.pix2text
  ]))
  poetry

  octave
  nodejs
  go
  bun
  sassc
  typescript
  meson
  ninja
  # eslint
  maven
  pkg-config
  rnix-lsp # WIP Language Server for Nix
  texliveFull
#+end_src
**** Lang-servers
#+begin_src nix
  pyright
  javascript-typescript-langserver
#+end_src
**** Database
#+begin_src nix
  sqlite
  dbeaver
#+end_src

**** Nix
These are tools for packaging using nix.
#+begin_src nix
  niv
  nix-universal-prefetch
  inputs.pip2nix.defaultPackage.${system}
 #+end_src
**** Others
#+begin_src nix
  doxygen
  doxygen_gui
  mynur.logisim-ita
#+end_src
*** Runtime
#+begin_src nix
  gtk-engine-murrine
  gnome-themes-extra
  mynur.tdlib # for building telegrame clients
#+end_src
*** Cmdline
**** Emulator
#+begin_src nix
  kitty
  alacritty
  wezterm
#+end_src
**** Tools
#+begin_src nix
carapace
starship
lf
thefuck
bat
eza
ranger nnn
fd
ripgrep
fzf
socat
jq
yq-go
acpi
inotify-tools
ffmpeg
libnotify
zoxide
autoconf
tree
ghostscript
_7zz
lazygit
hugo
pandoc
gh
zinit
#+end_src
**** Toys
#+begin_src nix
  pipes-rs
  tty-clock
  cava
  cmatrix
  fastfetch
  uniscribe # describe unicodes
  unipicker # pick unicodes
  nerdfix # find nerd font icons
#+end_src

*** Multimedia
**** Audio-production
#+begin_src nix
  # daw
  ardour
  # synthesizer-plugin
  zyn-fusion
  surge
  geonkick
  distrho
  # sampler
  avldrums-lv2
  drumkv1
  drumgizmo
  # effect processor
  calf
  lsp-plugins
#+end_src
**** Music Player
#+begin_src nix
  tauon
  tidal-dl
#+end_src
**** Image Editors
#+begin_src nix
  gimp-with-plugins
  inkscape
  imagemagick    # editing and manipulating digital images
#+end_src

**** Videos
#+begin_src nix
  (wrapOBS {
    plugins = with pkgs.obs-studio-plugins; [
      wlrobs
      obs-backgroundremoval
      obs-pipewire-audio-capture
    ];
  })
  kdenlive
  vlc
    #+end_src
**** PDF
#+begin_src nix
  zathura
#+end_src
*** Network
**** Browser
#+begin_src nix
  firefox
  chromium
  (vivaldi.override {
    proprietaryCodecs = true;
    enableWidevine = true;
    commandLineArgs = "--ozone-platform-hint=auto --enable-features=WaylandWindowDecorations --enable-wayland-ime";
  })
  mynur.thorium-browser
#+end_src
**** Message
#+begin_src nix
qq
discord
telegram-desktop
element-desktop
thunderbird
weechat # IRC
#+end_src
**** VPN
#+begin_src nix
  v2305.clash-verge
#+end_src
*** Gaming
#+begin_src nix
  prismlauncher
  glfw-wayland-minecraft
  zulu21
  steam-tui
  steamcmd
  steam
  gamescope
#+end_src
*** Desktop
#+begin_src nix
  nsxiv          # the best image viewer
  gnome.nautilus # gnome's file manager
  gnome.gnome-tweaks # gnome's file manager
  gnome.gnome-characters
  gtk-engine-murrine
  gnome-themes-extra
  cinnamon.nemo  # cinnamon's file manager
  doublecmd
  peazip

  hyprpaper      # wallpaper utility
  swww           # dynamic wallpaper
  gnome.adwaita-icon-theme

  # hyprkeys       # keybind retrieval utility
  # hyprnome       # gnome like workspace switch

  # hyprshade      # screen color filters
  # wl-gammactl    # set contrast, brightness and gamma on wl

  v2305.hyprpicker     # wlroots color picker
  wayshot        # screenshots tool
  grimblast      # screenshots tool
  wf-recorder    # screen recording tool
  swappy         # Wayland native snapshot editing tool

  grim           # wl raw screenshot
  slurp          # reigon selection (outputs reigon coordinates)


  wl-clipboard   # wayland clipboard

  wlogout        # logout gui
  rofi-wayland-unwrapped # app launcher
  pavucontrol    # sound control
  brightnessctl  # brightness control

  eww-wayland    # bar

  # bar and shell in gjs
  inputs.ags.packages.${system}.default

  # hyprland plugin set in python
  inputs.pyprland.packages.${system}.default
#+end_src
*** System-tools
#+begin_src nix
  gparted        # disk partition manager
  fsearch        # search files in disk
  lshw
  solaar         # connect with logitech devices
  iotop
  btop
  logiops        # Unofficial userspace driver for HID++ Logitech devices
  filelight      # inspecting disk usage statistics
  xorg.xhost          # launch gui with sudo in cmdline
  networkmanagerapplet # network manager, gtk frontend
  blueman        # bluetooth manager, gtk frontend
#+end_src
* Build
#+begin_src sh :dir /sudo::
	sudo nixos-rebuild switch --flake . --impure
#+end_src

#+RESULTS:

#+begin_src sh
	home-manager switch --flake .
#+end_src

#+begin_src sh
	nix flake update
#+end_src

#+begin_src sh
	sudo nix profile wipe-history --profile /nix/var/nix/profiles/system  --older-than 7d
	sudo nix store gc --debug
#+end_src
